import{BigInteger_op_Inequality_56F059C0,BigInteger_op_Equality_56F059C0,BigInteger_op_GreaterThanOrEqual_56F059C0,BigInteger_op_GreaterThan_56F059C0,BigInteger_op_LessThanOrEqual_56F059C0,BigInteger_op_LessThan_56F059C0,BigInteger_op_ExclusiveOr_56F059C0,BigInteger_op_BitwiseOr_56F059C0,BigInteger_op_BitwiseAnd_56F059C0,BigInteger_op_LeftShift_62E082A2,BigInteger_op_RightShift_62E082A2,BigInteger_op_UnaryPlus_Z665282C2,BigInteger_op_UnaryNegation_Z665282C2,BigInteger_op_Modulus_56F059C0,BigInteger_op_Division_56F059C0,BigInteger_op_Multiply_56F059C0,BigInteger_op_Subtraction_56F059C0,BigInteger_op_Addition_56F059C0,BigInteger__get_IsOne,BigInteger__get_IsZero,BigInteger__get_Sign,BigInteger__get_ToDecimal,BigInteger__get_ToDouble,BigInteger__get_ToSingle,BigInteger__get_ToUInt64,BigInteger__get_ToInt64,BigInteger__get_ToUInt32,BigInteger__get_ToInt32,BigInteger__get_ToUInt16,BigInteger__get_ToInt16,BigInteger__get_ToByte,BigInteger__get_ToSByte,BigInteger_$ctor_Z524259A4,BigInteger_$ctor_Z524259C1,BigInteger_get_Two,BigInteger_get_One,BigInteger_get_Zero,BigInteger_Abs_Z665282C2,BigInteger_Pow_62E082A2,BigInteger_GreatestCommonDivisor_56F059C0,BigInteger_DivRem_56F059C0,BigInteger_Parse_Z721C83C5,BigInteger}from"./BigInt/z.js";import{fromInteger}from"./Long.js";import{comparePrimitives,min,compare as compare_1,equals as equals_1,safeHash}from"./Util.js";import{toString as toString_1}from"./Types.js";import{fill,reverse,find}from"./Array.js";import{fold,empty,ofArrayWithTail,cons,toArray,head,skipWhile}from"./List.js";export function isBigInt(e){return e instanceof BigInteger}export function tryParse(e,t){try{return t.contents=BigInteger_Parse_Z721C83C5(e),!0}catch(e){return!1}}export function divRem(e,t,r){const n=BigInteger_DivRem_56F059C0(e,t);return r.contents=n[1],n[0]}export function parse(e){return BigInteger_Parse_Z721C83C5(e)}export function greatestCommonDivisor(e,t){return BigInteger_GreatestCommonDivisor_56F059C0(e,t)}export function pow(e,t){return BigInteger_Pow_62E082A2(e,t)}export function abs(e){return BigInteger_Abs_Z665282C2(e)}export const zero=BigInteger_get_Zero();export const one=BigInteger_get_One();export const two=BigInteger_get_Two();export function fromString(e){return BigInteger_Parse_Z721C83C5(e)}export function fromZero(){return BigInteger_get_Zero()}export function fromOne(){return BigInteger_get_One()}export function fromInt64(e){return BigInteger_$ctor_Z524259C1(e)}export function fromInt32(e){return e>2147483647?BigInteger_$ctor_Z524259C1(fromInteger(e,!1,6)):BigInteger_$ctor_Z524259A4(e)}export function toSByte(e){return BigInteger__get_ToSByte(e)}export function toByte(e){return BigInteger__get_ToByte(e)}export function toInt16(e){return BigInteger__get_ToInt16(e)}export function toUInt16(e){return BigInteger__get_ToUInt16(e)}export function toInt32(e){return BigInteger__get_ToInt32(e)}export function toUInt32(e){return BigInteger__get_ToUInt32(e)}export function toInt64(e){return BigInteger__get_ToInt64(e)}export function toUInt64(e){return BigInteger__get_ToUInt64(e)}export function toSingle(e){return BigInteger__get_ToSingle(e)}export function toDouble(e){return BigInteger__get_ToDouble(e)}export function toDecimal(e){return BigInteger__get_ToDecimal(e)}export function sign(e){return BigInteger__get_Sign(e)}export function isZero(e){return BigInteger__get_IsZero(e)}export function isOne(e){return BigInteger__get_IsOne(e)}export function hash(e){return safeHash(e)}export function compare(e,t){return e.CompareTo(t)}export function equals(e,t){return equals_1(e,t)}export function toString(e){return toString_1(e)}export const get_Zero=BigInteger_get_Zero();export const get_One=BigInteger_get_One();export function op_Addition(e,t){return BigInteger_op_Addition_56F059C0(e,t)}export function op_Subtraction(e,t){return BigInteger_op_Subtraction_56F059C0(e,t)}export function op_Multiply(e,t){return BigInteger_op_Multiply_56F059C0(e,t)}export function op_Division(e,t){return BigInteger_op_Division_56F059C0(e,t)}export function op_Modulus(e,t){return BigInteger_op_Modulus_56F059C0(e,t)}export function op_UnaryNegation(e){return BigInteger_op_UnaryNegation_Z665282C2(e)}export function op_UnaryPlus(e){return BigInteger_op_UnaryPlus_Z665282C2(e)}export function op_RightShift(e,t){return BigInteger_op_RightShift_62E082A2(e,t)}export function op_LeftShift(e,t){return BigInteger_op_LeftShift_62E082A2(e,t)}export function op_BitwiseAnd(e,t){return BigInteger_op_BitwiseAnd_56F059C0(e,t)}export function op_BitwiseOr(e,t){return BigInteger_op_BitwiseOr_56F059C0(e,t)}export function op_ExclusiveOr(e,t){return BigInteger_op_ExclusiveOr_56F059C0(e,t)}export function op_LessThan(e,t){return BigInteger_op_LessThan_56F059C0(e,t)}export function op_LessThanOrEqual(e,t){return BigInteger_op_LessThanOrEqual_56F059C0(e,t)}export function op_GreaterThan(e,t){return BigInteger_op_GreaterThan_56F059C0(e,t)}export function op_GreaterThanOrEqual(e,t){return BigInteger_op_GreaterThanOrEqual_56F059C0(e,t)}export function op_Equality(e,t){return BigInteger_op_Equality_56F059C0(e,t)}export function op_Inequality(e,t){return BigInteger_op_Inequality_56F059C0(e,t)}function flipTwosComplement(e,t){return t?[255&(255^e),!0]:0===e?[0,!1]:[255&(e^254<<find((t=>(e&1<<t)>0),new Int32Array([0,1,2,3,4,5,6,7]))),!0]}export function toByteArray(e){if(equals_1(e,zero))return new Uint8Array([0]);{const t=compare_1(e,zero)>0,r=t?e:BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1),e),n=fromInt64(fromInteger(4294967295,!1,6));return((e,r,o)=>{let i,_,g,p;e:for(;;){const u=e,I=r,B=o;if(compare_1(I,zero)<=0){const e=skipWhile(t?e=>0===e:e=>255===e,u),r=0!=(128&head(e));return reverse(toArray(t&&r?cons(0,e):t||r?e:cons(255,e)))}{const f=toUInt32(BigInteger_op_BitwiseAnd_56F059C0(I,n));if(t){let t,n;t=255&f>>>8,n=255&f>>>16,e=ofArrayWithTail([(i=f>>>24,255&i),n,t,255&f],u),r=BigInteger_op_RightShift_62E082A2(I,32),o=!1;continue e}{const t=flipTwosComplement(255&f,B),n=flipTwosComplement((_=f>>>8,255&_),t[1]),i=flipTwosComplement((g=f>>>16,255&g),n[1]),s=flipTwosComplement((p=f>>>24,255&p),i[1]);e=ofArrayWithTail([s[0],i[0],n[0],t[0]],u),r=BigInteger_op_RightShift_62E082A2(I,32),o=s[1];continue e}}}})(empty(),r,!1)}}export function fromByteArray(e){if(null==e)throw new Error("bytes");if(0===e.length)return zero;{const t=0==(128&e[e.length-1]),r=fill(new Uint8Array(4),0,4,0);return((n,o,i,_)=>{e:for(;;){const g=n,p=o,u=i,I=_;if(0===u){const e=fold(((e,t)=>BigInteger_op_Addition_56F059C0(BigInteger_op_LeftShift_62E082A2(e,32),fromInt64(fromInteger(t,!1,6)))),zero,g);return t?e:BigInteger_op_Multiply_56F059C0(BigInteger_$ctor_Z524259A4(-1),e)}{const B=0|min(comparePrimitives,u,4);for(let t=0;t<=B-1;t++)r[t]=e[p+t];if(t){fill(r,B,4-B,0),n=cons((((r[0]|r[1]<<8>>>0)>>>0|r[2]<<16>>>0)>>>0|r[3]<<24>>>0)>>>0,g),o=p+B,i=u-B,_=!1;continue e}{fill(r,B,4-B,255);const e=flipTwosComplement(r[0],I),t=flipTwosComplement(r[1],e[1]),f=flipTwosComplement(r[2],t[1]),s=flipTwosComplement(r[3],f[1]);n=cons((((e[0]|t[0]<<8>>>0)>>>0|f[0]<<16>>>0)>>>0|s[0]<<24>>>0)>>>0,g),o=p+B,i=u-B,_=s[1];continue e}}}})(empty(),0,e.length,!1)}}