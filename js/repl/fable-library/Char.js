import*as Unicode from"./Unicode.13.0.0.js";function getCategoryFunc(){const t=[...Unicode.rangeDeltas].map((t=>{var e;return(null!==(e=t.codePointAt(0))&&void 0!==e?e:0)-35})),e=[...Unicode.categories].map((t=>{var e;return(null!==(e=t.codePointAt(0))&&void 0!==e?e:0)-35})),r=new Uint32Array(t),o=new Uint8Array(e);for(let t=1;t<r.length;++t)r[t]+=r[t-1];return t=>{let e=r.length,i=0;for(;e-i>1;){const o=Math.floor((e+i)/2),n=r[o];if(t<n)e=o;else{if(t===n){e=i=o;break}n<t&&(i=o)}}return o[i]}}const isControlMask=16384,isDigitMask=256,isLetterMask=31,isLetterOrDigitMask=isLetterMask|isDigitMask,isUpperMask=1,isLowerMask=2,isNumberMask=1792,isPunctuationMask=33292288,isSeparatorMask=14336,isSymbolMask=503316480,isWhiteSpaceMask=14336,unicodeCategoryFunc=getCategoryFunc();function charCodeAt(t,e){if(e>=0&&e<t.length)return t.charCodeAt(e);throw new Error("Index out of range.")}export const getUnicodeCategory=t=>getUnicodeCategory2(t,0);export const isControl=t=>isControl2(t,0);export const isDigit=t=>isDigit2(t,0);export const isLetter=t=>isLetter2(t,0);export const isLetterOrDigit=t=>isLetterOrDigit2(t,0);export const isUpper=t=>isUpper2(t,0);export const isLower=t=>isLower2(t,0);export const isNumber=t=>isNumber2(t,0);export const isPunctuation=t=>isPunctuation2(t,0);export const isSeparator=t=>isSeparator2(t,0);export const isSymbol=t=>isSymbol2(t,0);export const isWhiteSpace=t=>isWhiteSpace2(t,0);export const isHighSurrogate=t=>isHighSurrogate2(t,0);export const isLowSurrogate=t=>isLowSurrogate2(t,0);export const isSurrogate=t=>isSurrogate2(t,0);export function getUnicodeCategory2(t,e){const r=charCodeAt(t,e);return unicodeCategoryFunc(r)}export function isControl2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isControlMask)}export function isDigit2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isDigitMask)}export function isLetter2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isLetterMask)}export function isLetterOrDigit2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isLetterOrDigitMask)}export function isUpper2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isUpperMask)}export function isLower2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isLowerMask)}export function isNumber2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isNumberMask)}export function isPunctuation2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isPunctuationMask)}export function isSeparator2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isSeparatorMask)}export function isSymbol2(t,e){return 0!=(1<<getUnicodeCategory2(t,e)&isSymbolMask)}export function isWhiteSpace2(t,e){if(0!=(1<<getUnicodeCategory2(t,e)&isWhiteSpaceMask))return!0;const r=charCodeAt(t,e);return 9<=r&&r<=13||133===r||160===r}export function isHighSurrogate2(t,e){const r=charCodeAt(t,e);return 55296<=r&&r<=56319}export function isLowSurrogate2(t,e){const r=charCodeAt(t,e);return 56320<=r&&r<=57343}export function isSurrogate2(t,e){const r=charCodeAt(t,e);return 55296<=r&&r<=57343}export function isSurrogatePair(t,e){return"number"==typeof e?isHighSurrogate2(t,e)&&isLowSurrogate2(t,e+1):isHighSurrogate(t)&&isLowSurrogate(e)}export function parse(t){if(1===t.length)return t[0];throw new Error("String must be exactly one character long.")}