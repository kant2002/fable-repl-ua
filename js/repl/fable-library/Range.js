import{compare}from"./Util.js";import{unfold,delay}from"./Seq.js";import{op_Addition,fromZero}from"./BigInt.js";import{op_Addition as op_Addition_1,fromParts}from"./Decimal.js";import{op_Addition as op_Addition_2,fromBits}from"./Long.js";export function makeRangeStepFunction(o,n,t,r){const e=0|compare(o,t);if(0===e)throw new Error("The step of a range cannot be zero");const i=e>0;return t=>{const e=0|compare(t,n);return i&&e<=0||!i&&e>=0?[t,r(t,o)]:void 0}}export function integralRangeStep(o,n,t,r,e){const i=makeRangeStepFunction(n,t,r,e);return delay((()=>unfold(i,o)))}export function rangeBigInt(o,n,t){return integralRangeStep(o,n,t,fromZero(),op_Addition)}export function rangeDecimal(o,n,t){return integralRangeStep(o,n,t,fromParts(0,0,0,!1,0),op_Addition_1)}export function rangeDouble(o,n,t){return integralRangeStep(o,n,t,0,((o,n)=>o+n))}export function rangeInt64(o,n,t){return integralRangeStep(o,n,t,fromBits(0,0,!1),op_Addition_2)}export function rangeUInt64(o,n,t){return integralRangeStep(o,n,t,fromBits(0,0,!0),op_Addition_2)}export function rangeChar(o,n){const t=0|n.charCodeAt(0);return delay((()=>unfold((o=>o<=t?[String.fromCharCode(o),o+1]:void 0),o.charCodeAt(0))))}