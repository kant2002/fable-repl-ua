import Decimal from"./lib/big.js";import{FSharpRef}from"./Types.js";export default Decimal;export const get_Zero=new Decimal(0);export const get_One=new Decimal(1);export const get_MinusOne=new Decimal(-1);export const get_MaxValue=new Decimal("79228162514264337593543950335");export const get_MinValue=new Decimal("-79228162514264337593543950335");export function compare(t,n){return t.cmp(n)}export function equals(t,n){return!t.cmp(n)}export function abs(t){return t.abs()}export function round(t,n=0){return t.round(n,2)}export function truncate(t){return t.round(0,0)}export function ceiling(t){return t.round(0,t.cmp(0)>=0?3:0)}export function floor(t){return t.round(0,t.cmp(0)>=0?0:3)}export function pow(t,n){return t.pow(n)}export function sqrt(t){return t.sqrt()}export function op_Addition(t,n){return t.add(n)}export function op_Subtraction(t,n){return t.sub(n)}export function op_Multiply(t,n){return t.mul(n)}export function op_Division(t,n){return t.div(n)}export function op_Modulus(t,n){return t.mod(n)}export function op_UnaryNegation(t){const n=new Decimal(t);return n.s=-n.s||0,n}export function op_UnaryPlus(t){return t}export const add=op_Addition;export const subtract=op_Subtraction;export const multiply=op_Multiply;export const divide=op_Division;export const remainder=op_Modulus;export const negate=op_UnaryNegation;export function toString(t){return t.toString()}export function tryParse(t,n){try{return n.contents=new Decimal(t.trim()),!0}catch(t){return!1}}export function parse(t){const n=new FSharpRef(get_Zero);if(tryParse(t,n))return n.contents;throw new Error("Input string was not in a correct format.")}export function toNumber(t){return+t}function decimalToHex(t,n){const r=new Uint8Array(n/4|0);let e=1;for(let n=0;n<t.length;n++){let o=t[n];for(let t=0;t<e;t++){const n=10*r[t]+o|0;r[t]=15&n,o=n>>4}0!==o&&(r[e++]=o)}return r.slice(0,e)}function hexToDecimal(t,n){const r=new Uint8Array(301*n/1e3+1|0);let e=1;for(let n=t.length-1;n>=0;n--){let o=t[n];for(let t=0;t<e;t++){const n=16*r[t]+o|0;r[t]=n%10|0,o=n/10|0}for(;o>0;)r[e++]=o%10|0,o=o/10|0}return r.slice(0,e)}function setInt32Bits(t,n,r){for(let e=0;e<8;e++)t[r+e]=n>>4*e&15}function getInt32Bits(t,n){let r=0;for(let e=0;e<8;e++)r|=t[n+e]<<4*e;return r}export function fromIntArray(t){return fromInts(t[0],t[1],t[2],t[3])}export function fromInts(t,n,r,e){return fromParts(t,n,r,e<0,e>>16&127)}export function fromParts(t,n,r,e,o){const i=new Uint8Array(24);setInt32Bits(i,t,0),setInt32Bits(i,n,8),setInt32Bits(i,r,16);const c=hexToDecimal(i,96);o&=127;const u=new Decimal(0);return u.c=Array.from(c.reverse()),u.e=c.length-o-1,u.s=e?-1:1,new Decimal(u)}export function getBits(t){const n=decimalToHex(Uint8Array.from(t.c),96),r=getInt32Bits(n,0),e=getInt32Bits(n,8),o=getInt32Bits(n,16),i=t.toString(),c=i.indexOf(".");return[r,e,o,(127&(c<0?0:i.length-c-1))<<16|(t.s<0?2147483648:0)]}