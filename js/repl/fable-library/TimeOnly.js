import{op_Division as Long_op_Division,toNumber as Long_toNumber}from"./Long.js";import{hours,minutes,seconds,milliseconds}from"./TimeSpan.js";import{padWithZeros}from"./Util.js";const millisecondsPerDay=864e5;export function create(e=0,r=0,n=0,t=0){if(e<0||r<0||n<0||t<0)throw new Error("The parameters describe an unrepresentable TimeOnly.");return 1===arguments.length?fromTicks(arguments[0]):36e5*e+6e4*r+1e3*n+t}export function fromTicks(e){return Long_toNumber(Long_op_Division(e,1e4))}export function fromTimeSpan(e){if(e<0||e>=millisecondsPerDay)throw new Error("The TimeSpan describes an unrepresentable TimeOnly.");return e}export function fromDateTime(e){return 1===e.kind?create(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()):create(e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds())}export function maxValue(){return millisecondsPerDay-1}export function add(e,r,n){if(void 0===n){const n=(e+r)%millisecondsPerDay;return n<0?millisecondsPerDay+n:n}n.contents=r/millisecondsPerDay;let t=e+r%millisecondsPerDay;return t<0?(n.contents--,t+=millisecondsPerDay):t>=millisecondsPerDay&&(n.contents++,t-=millisecondsPerDay),t}export function addHours(e,r){return add(e,36e5*r)}export function addMinutes(e,r){return add(e,6e4*r)}export function isBetween(e,r,n){return r<=n?r<=e&&n>e:r<=e||n>e}export function toString(e,r="t",n){if(-1===["r","R","o","O","t","T"].indexOf(r))throw new Error("Custom formats are not supported");const t=`${padWithZeros(hours(e),2)}:${padWithZeros(minutes(e),2)}`;if("t"===r)return t;const o=padWithZeros(seconds(e),2);return`${t}${"o"===r||"O"===r?`:${o}.${padWithZeros(milliseconds(e),3)}0000`:`:${o}`}`}export function parse(e){const r=/^\s*([0-1]?\d|2[0-3])\s*:\s*([0-5]?\d)(\s*:\s*([0-5]?\d)(\.(\d+))?)?\s*$/.exec(e);if(null!=r&&null!=r[1]&&null!=r[2]){let e=0,n=0;const t=+r[1],o=+r[2];if(null!=r[4]&&(n=+r[4]),null!=r[6])switch(r[6].length){case 1:e=100*+r[6];break;case 2:e=10*+r[6];break;case 3:e=+r[6];break;case 4:e=+r[6]/10;break;case 5:e=+r[6]/100;break;case 6:e=+r[6]/1e3;break;default:e=+r[6].substring(0,7)/1e4}return create(t,o,n,Math.trunc(e))}throw new Error(`String '${e}' was not recognized as a valid TimeOnly.`)}export function tryParse(e,r){try{return r.contents=parse(e),!0}catch(e){return!1}}export function op_Subtraction(e,r){return add(e,-r)}