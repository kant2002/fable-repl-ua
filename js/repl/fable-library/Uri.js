const ok=r=>({tag:"ok",value:r}),error=r=>({tag:"error",error:r});export class Uri{constructor(r){this.uri=r}static isAbsoluteUri(r){try{return new URL(r),!0}catch(r){return!1}}static tryCreateWithKind(r,e){switch(e){case 1:return Uri.isAbsoluteUri(r)?ok(new Uri({original:r,value:new URL(r),kind:e})):error("Invalid URI: The format of the URI could not be determined.");case 2:return Uri.isAbsoluteUri(r)?error("URI is not a relative path."):ok(new Uri({original:r,value:r,kind:e}));case 0:return Uri.isAbsoluteUri(r)?ok(new Uri({original:r,value:new URL(r),kind:1})):ok(new Uri({original:r,value:r,kind:2}));default:return e}}static tryCreateWithBase(r,e){return 1!==r.uri.kind?error("Base URI should have Absolute kind"):"string"==typeof e?ok(new Uri({original:new URL(e,r.uri.value).toString(),value:new URL(e,r.uri.value),kind:1})):2===e.uri.kind?ok(new Uri({original:new URL(e.uri.value,r.uri.value).toString(),value:new URL(e.uri.value,r.uri.value),kind:1})):ok(r)}static tryCreateImpl(r,e=1){return"string"==typeof r?"number"!=typeof e?error("Kind must be specified when the baseUri is a string."):Uri.tryCreateWithKind(r,e):"number"==typeof e?error("Kind should not be specified when the baseUri is an absolute Uri."):Uri.tryCreateWithBase(r,e)}static create(r,e=1){const t=Uri.tryCreateImpl(r,e);switch(t.tag){case"ok":return t.value;case"error":throw new Error(t.error);default:return t}}static tryCreate(r,e=1,t){const i=Uri.tryCreateImpl(r,e);switch(i.tag){case"ok":return t.contents=i.value,!0;case"error":return!1;default:return i}}toString(){switch(this.uri.kind){case 1:return decodeURIComponent(this.asUrl().toString());case 2:return this.uri.value;default:return this.uri}}asUrl(){switch(this.uri.kind){case 1:return this.uri.value;case 2:throw new Error("This operation is not supported for a relative URI.");default:return this.uri}}get isAbsoluteUri(){return 1===this.uri.kind}get absoluteUri(){return this.asUrl().href}get scheme(){const r=this.asUrl().protocol;return r.slice(0,r.length-1)}get host(){return this.asUrl().host}get absolutePath(){return this.asUrl().pathname}get query(){return this.asUrl().search}get pathAndQuery(){const r=this.asUrl();return r.pathname+r.search}get fragment(){return this.asUrl().hash}get originalString(){return this.uri.original}}export default Uri;