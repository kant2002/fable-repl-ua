import{fromNumber as Long_fromNumber,op_Division as Long_op_Division,op_Multiply as Long_op_Multiply,toNumber as Long_toNumber}from"./Long.js";import{comparePrimitives,padLeftAndRightWithZeros,padWithZeros}from"./Util.js";function signedRound(t){return t<0?Math.ceil(t):Math.floor(t)}export function create(t=0,e=0,r=0,o=0,n=0){switch(arguments.length){case 1:return fromTicks(arguments[0]);case 3:t=0,e=arguments[0],r=arguments[1],o=arguments[2],n=0}return 864e5*t+36e5*e+6e4*r+1e3*o+n}export function fromTicks(t){return Long_toNumber(Long_op_Division(t,1e4))}export function fromDays(t){return create(t,0,0,0)}export function fromHours(t){return create(t,0,0)}export function fromMinutes(t){return create(0,t,0)}export function fromSeconds(t){return create(0,0,t)}export function days(t){return signedRound(t/864e5)}export function hours(t){return signedRound(t%864e5/36e5)}export function minutes(t){return signedRound(t%36e5/6e4)}export function seconds(t){return signedRound(t%6e4/1e3)}export function milliseconds(t){return signedRound(t%1e3)}export function ticks(t){return Long_op_Multiply(Long_fromNumber(t),1e4)}export function totalDays(t){return t/864e5}export function totalHours(t){return t/36e5}export function totalMinutes(t){return t/6e4}export function totalSeconds(t){return t/1e3}export function negate(t){return-1*t}export function add(t,e){return t+e}export function subtract(t,e){return t-e}export function multiply(t,e){return t*e}export function divide(t,e){return t/e}export const op_Addition=add;export const op_Subtraction=subtract;export const op_Multiply=multiply;export const op_Division=divide;export const compare=comparePrimitives;export const compareTo=comparePrimitives;export function duration(t){return Math.abs(t)}export function toString(t,e="c",r){if(-1===["c","g","G"].indexOf(e))throw new Error("Custom formats are not supported");const o=Math.abs(days(t)),n=Math.abs(hours(t)),i=Math.abs(minutes(t)),s=Math.abs(seconds(t)),u=Math.abs(milliseconds(t));return`${t<0?"-":""}${0!==o||"c"!==e&&"g"!==e?"c"===e?o+".":o+":":""}${"g"===e?n:padWithZeros(n,2)}:${padWithZeros(i,2)}:${padWithZeros(s,2)}${0!==u||"c"!==e&&"g"!==e?"g"===e?"."+padWithZeros(u,3):"."+padLeftAndRightWithZeros(u,3,7):""}`}export function parse(t){const e=t.search("\\."),r=t.search("\\:");if(-1===e&&-1===r){const e=parseInt(t,0);if(isNaN(e))throw new Error(`String '${t}' was not recognized as a valid TimeSpan.`);return create(e,0,0,0,0)}if(r>0){const e=/^(-?)((\d+)\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\.?(\d+)?$/.exec(t);if(null!=e&&null!=e[4]&&null!=e[5]){let r=0,o=0,n=0;const i=null!=e[1]&&"-"===e[1]?-1:1,s=+e[4],u=+e[5];if(null!=e[3]&&(r=+e[3]),null!=e[7]&&(n=+e[7]),null!=e[8])switch(e[8].length){case 1:o=100*+e[8];break;case 2:o=10*+e[8];break;case 3:o=+e[8];break;case 4:o=+e[8]/10;break;case 5:o=+e[8]/100;break;case 6:o=+e[8]/1e3;break;case 7:o=+e[8]/1e4;break;default:throw new Error(`String '${t}' was not recognized as a valid TimeSpan.`)}return i*create(r,s,u,n,o)}}throw new Error(`String '${t}' was not recognized as a valid TimeSpan.`)}export function tryParse(t,e){try{return e.contents=parse(t),!0}catch(t){return!1}}