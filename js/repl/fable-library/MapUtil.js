import{equals}from"./Util.js";import{Union}from"./Types.js";const CaseRules={None:0,LowerFirst:1,SnakeCase:2,SnakeCaseAllCaps:3,KebabCase:4};function dashify(e,t){return e.replace(/[a-z]?[A-Z]/g,(e=>1===e.length?e.toLowerCase():e.charAt(0)+t+e.charAt(1).toLowerCase()))}function changeCase(e,t){switch(t){case CaseRules.LowerFirst:return e.charAt(0).toLowerCase()+e.slice(1);case CaseRules.SnakeCase:return dashify(e,"_");case CaseRules.SnakeCaseAllCaps:return dashify(e,"_").toUpperCase();case CaseRules.KebabCase:return dashify(e,"-");case CaseRules.None:default:return e}}export function keyValueList(e,t=CaseRules.None){const a={},n=t;function s(e){throw new Error("Cannot infer key and value of "+String(e))}function r(e,t,n){e=changeCase(e,t),a[e]=n}for(let t of e){let e=CaseRules.None;if(null==t&&s(t),t instanceof Union){const a=t.cases()[t.tag];t=0===t.fields.length?a:[a].concat(t.fields),e=n}if(Array.isArray(t))switch(t.length){case 0:s(t);break;case 1:r(t[0],e,!0);break;case 2:const a=t[1];r(t[0],e,a);break;default:r(t[0],e,t.slice(1))}else"string"==typeof t?r(t,e,!0):s(t)}return a}export function containsValue(e,t){for(const a of t)if(equals(e,a[1]))return!0;return!1}export function tryGetValue(e,t,a){return!!e.has(t)&&(a.contents=e.get(t),!0)}export function addToSet(e,t){return!t.has(e)&&(t.add(e),!0)}export function addToDict(e,t,a){if(e.has(t))throw new Error("An item with the same key has already been added. Key: "+t);e.set(t,a)}export function getItemFromDict(e,t){if(e.has(t))return e.get(t);throw new Error(`The given key '${t}' was not present in the dictionary.`)}