import{combineHashCodes,compare,compareArrays,equalArrays,equals,sameConstructor,numberHash,structuralHash}from"./Util.js";export function seqToString(t){let r=0,e="[";for(const o of t){if(0===r)e+=toString(o);else{if(100===r){e+="; ...";break}e+="; "+toString(o)}r++}return e+"]"}export function toString(t,r=0){var e,o;if(null!=t&&"object"==typeof t){if("function"==typeof t.toString)return t.toString();if(Symbol.iterator in t)return seqToString(t);{const n=null===(e=Object.getPrototypeOf(t))||void 0===e?void 0:e.constructor;return n===Object&&r<10?"{ "+Object.entries(t).map((([t,e])=>t+" = "+toString(e,r+1))).join("\n  ")+" }":null!==(o=null==n?void 0:n.name)&&void 0!==o?o:""}}return String(t)}export function unionToString(t,r){if(0===r.length)return t;{let e,o=!0;return 1===r.length?(e=toString(r[0]),o=e.indexOf(" ")>=0):e=r.map((t=>toString(t))).join(", "),t+(o?" (":" ")+e+(o?")":"")}}export class Union{get name(){return this.cases()[this.tag]}toJSON(){return 0===this.fields.length?this.name:[this.name].concat(this.fields)}toString(){return unionToString(this.name,this.fields)}GetHashCode(){const t=this.fields.map((t=>structuralHash(t)));return t.splice(0,0,numberHash(this.tag)),combineHashCodes(t)}Equals(t){return this===t||!!sameConstructor(this,t)&&this.tag===t.tag&&equalArrays(this.fields,t.fields)}CompareTo(t){return this===t?0:sameConstructor(this,t)?this.tag===t.tag?compareArrays(this.fields,t.fields):this.tag<t.tag?-1:1:-1}}function recordToJSON(t){const r={},e=Object.keys(t);for(let o=0;o<e.length;o++)r[e[o]]=t[e[o]];return r}function recordToString(t){return"{ "+Object.entries(t).map((([t,r])=>t+" = "+toString(r))).join("\n  ")+" }"}function recordGetHashCode(t){const r=Object.values(t).map((t=>structuralHash(t)));return combineHashCodes(r)}function recordEquals(t,r){if(t===r)return!0;if(sameConstructor(t,r)){const e=Object.keys(t);for(let o=0;o<e.length;o++)if(!equals(t[e[o]],r[e[o]]))return!1;return!0}return!1}function recordCompareTo(t,r){if(t===r)return 0;if(sameConstructor(t,r)){const e=Object.keys(t);for(let o=0;o<e.length;o++){const n=compare(t[e[o]],r[e[o]]);if(0!==n)return n}return 0}return-1}export class Record{toJSON(){return recordToJSON(this)}toString(){return recordToString(this)}GetHashCode(){return recordGetHashCode(this)}Equals(t){return recordEquals(this,t)}CompareTo(t){return recordCompareTo(this,t)}}export class FSharpRef{get contents(){return this.getter()}set contents(t){this.setter(t)}constructor(t,r){"function"==typeof r?(this.getter=t,this.setter=r):(this.getter=()=>t,this.setter=r=>{t=r})}}export class Exception{constructor(t){this.message=t}}export function isException(t){return t instanceof Exception||t instanceof Error}export function isPromise(t){return t instanceof Promise}export function ensureErrorOrException(t){return isException(t)||isPromise(t)?t:new Error(String(t))}export class FSharpException extends Exception{toJSON(){return recordToJSON(this)}toString(){return recordToString(this)}GetHashCode(){return recordGetHashCode(this)}Equals(t){return recordEquals(this,t)}CompareTo(t){return recordCompareTo(this,t)}}export class MatchFailureException extends FSharpException{constructor(t,r,e){super(),this.arg1=t,this.arg2=0|r,this.arg3=0|e,this.message="The match cases were incomplete"}}export class Attribute{}