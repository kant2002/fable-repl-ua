module Tour.Collections

// Із https://docs.microsoft.com/en-us/dotnet/fsharp/tour
// Щоб дізнатися більше про кожну тему, перейдіть за посиланням вище
// Ви також можете знайти більше навчальних ресурсів за адресою https://fsharp.org/
// (лише англійською)

module Списки =

    /// Списки визначаються за допомогою [ ... ].  Це порожній список.
    let список1 = [ ]

    /// Це список із 3 елементів.  ';' використовується для розділення елементів на одній лінії.
    let список2 = [ 1; 2; 3 ]

    /// Ви також можете розділяти елементи, розміщуючи їх на окремих лініях.
    let список3 = [
        1
        2
        3
    ]

    /// Це список цілих чисел від 1 до 1000
    let списокЧисел = [ 1 .. 1000 ]

    /// Списки також можуть бути створені шляхом обчислень. Це список,
    /// що містить усі дні року.
    let списокДнів =
        [ for місяць in 1 .. 12 do
              for день in 1 .. System.DateTime.DaysInMonth(2017, місяць) do
                  yield System.DateTime(2017, місяць, день) ]

    // Надрукуйте перші 5 елементів 'списокДнів' за допомогою 'List.take'.
    printfn "Перші 5 днів 2017 року: %A" (списокДнів |> List.take 5)

    /// Обчислення можуть містити умови.  Це список, що містить кортежі,
    /// які є координатами чорних квадратів на шахівниці.
    let чорніКвадрати =
        [ for i in 0 .. 7 do
              for j in 0 .. 7 do
                  if (i+j) % 2 = 1 then
                      yield (i, j) ]

    /// Списки можна трансформувати за допомогою 'List.map' та інших комбінаторів функціонального програмування.
    /// Це визначення створює новий список шляхом зведення чисел із numberList у квадрат, використовуючи
    /// оператор конвеєра для передачі аргументу List.map.
    let квадрати =
        списокЧисел
        |> List.map (fun x -> x*x)

    /// Є багато інших комбінацій списків. Далі обчислюється сума квадратів чисел,
    /// які діляться на 3.
    let сумаКвадратів =
        списокЧисел
        |> List.filter (fun x -> x % 3 = 0)
        |> List.sumBy (fun x -> x * x)

    printfn "Сума квадратів чисел до 1000, які діляться на 3, дорівнює: %d" сумаКвадратів


module Массиви =

    /// Це порожній масив.  Зауважте, що синтаксис подібний до Cписків, але використовує `[| ... |]` замість `[ ... ]`.
    let масив1 = [| |]

    /// Масиви вказуються за допомогою того самого списку конструкцій, що й списки.
    let масив2 = [| "привіт"; "світ"; "та"; "привіт"; "світ"; "знову" |]

    /// Це масив чисел від 1 до 1000.
    let масив3 = [| 1 .. 1000 |]

    /// Це масив, що містить лише слова "привіт" та "світ".
    let масив4 =
        [| for слово in масив2 do
               if слово.Contains("і") then
                   yield слово |]

    /// Це масив, ініціалізований індексом і містить парні числа від 0 до 2000.
    let парніЧисла = Array.init 1001 (fun n -> n * 2)

    /// Підмасиви витягуються за допомогою нотації зрізу.
    let зрізПарнихЧисел = парніЧисла.[0..500]

    // Ви можете перебирати масиви та списки за допомогою циклів 'for'.
    for слово in масив4 do
        printfn "слово: %s" слово

    // Ви можете змінити вміст елемента масиву за допомогою оператора призначення стрілка вліво.
    //
    // Щоб дізнатися більше про цього оператора, дивиться: https://docs.microsoft.com/dotnet/fsharp/language-reference/values/index#mutable-variables
    масив2.[1] <- "WORLD!"

    /// You can transform arrays using 'Array.map' and other functional programming operations.
    /// The following calculates the sum of the lengths of the words that start with 'п'.
    let сумаДовжинСлів =
        масив2
        |> Array.filter (fun x -> x.StartsWith "п")
        |> Array.sumBy (fun x -> x.Length)

    printfn "Сума довжин слів у масиві 2 дорівнює: %d" сумаДовжинСлів


module Послідовності =

    /// Це порожня послідовність.
    let посл1 = Seq.empty

    /// This a sequence of values.
    let посл2 = seq { yield "привіт"; yield "світ"; yield "та"; yield "привіт"; yield "світ"; yield "знову" }

    /// Це послідовність по запиту від 1 до 1000.
    let числоваПосл = seq { 1 .. 1000 }

    /// Це послідовність що створює слова "привіт" та "світ"
    let посл =
        seq { for слово in посл2 do
                  if слово.Contains("і") then
                      yield слово }

    /// Ця послідовність створює парні числа до 2000.
    let evenNumbers = Seq.init 1001 (fun n -> n * 2)

    let випадк = System.Random()

    /// Це нескінченна послідовність, яка є випадковим блуканням.
    /// У цьому прикладі використовується yield! щоб повернути кожен елемент підпослідовності.
    let rec випадковеБлукання x =
        seq { yield x
              yield! випадковеБлукання (x + випадк.NextDouble() - 0.5) }

    /// У цьому прикладі показано перші 100 елементів випадкового блукання.
    let перші100ЗначеньВипадковогоБлукання =
        випадковеБлукання 5.0
        |> Seq.truncate 100
        |> Seq.toList

    printfn "Перші 100 елементів випадкового блукання: %A" перші100ЗначеньВипадковогоБлукання
